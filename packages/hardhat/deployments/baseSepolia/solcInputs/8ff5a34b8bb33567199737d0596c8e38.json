{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/RwaForge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract RwaForge is Ownable {\r\n    //Structs\r\n    struct Asset {\r\n        uint256 id;\r\n        address seller;\r\n        string title;\r\n        string description;\r\n        string category;\r\n        string location;\r\n        string[] imageURIs;\r\n        uint256 price;\r\n        uint256 tokenSupply;\r\n        uint256 tokensAvailable;\r\n        bool isActive;\r\n        uint256 date;\r\n    }\r\n\r\n    struct AssetPurchased {\r\n        uint256 purchaseID;\r\n        uint256 assetID;\r\n        address buyer;\r\n        string title;\r\n        string description;\r\n        string category;\r\n        string[] imageUris;\r\n        uint256 amount;\r\n    }\r\n\r\n    //States\r\n    uint256 public nextAssetId;\r\n    uint256 public purchaseID;\r\n\r\n    mapping(uint256 => Asset) public assets;\r\n    mapping(address => uint256[]) public assetsPublishedBy;\r\n    mapping(address => mapping(uint256 => uint256)) public tokensOwnedByUser;\r\n    mapping(address => AssetPurchased[]) private purchasesByBuyer;\r\n\r\n    //Events\r\n    event AssetPublished(uint256 indexed _assetId, address indexed seller);\r\n    event AssetsPurchasedEvent(uint256 indexed _assetId, address indexed buyer, uint256 amount);\r\n    event AssetDeactivated(uint256 indexed _assetId);\r\n\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    function publishAsset(\r\n        string memory title,\r\n        string memory description,\r\n        string memory category,\r\n        string memory location,\r\n        string[] memory _imageURIs,\r\n        uint256 price,\r\n        uint256 tokenSupply\r\n    ) external {\r\n        require(price > 0, \"Price must be positive\");\r\n        require(tokenSupply > 0, \"Token supply must be positive\");\r\n        require(_imageURIs.length >= 1, \"At least one image is required\");\r\n        require(_imageURIs.length <= 5, \"Maximum of 5 images allowed\");\r\n\r\n        for (uint i = 0; i < _imageURIs.length; i++) {\r\n            require(bytes(_imageURIs[i]).length > 0, \"Image URI cannot be empty\");\r\n        }\r\n\r\n        assets[nextAssetId] = Asset({\r\n            id: nextAssetId,\r\n            seller: msg.sender,\r\n            title: title,\r\n            description: description,\r\n            category: category,\r\n            location: location,\r\n            imageURIs: _imageURIs,\r\n            price: price,\r\n            tokenSupply: tokenSupply,\r\n            tokensAvailable: tokenSupply,\r\n            isActive: true,\r\n            date: block.timestamp\r\n        });\r\n\r\n        assetsPublishedBy[msg.sender].push(nextAssetId);\r\n        emit AssetPublished(nextAssetId, msg.sender);\r\n        nextAssetId++;\r\n    }\r\n\r\n    function buyTokens(uint256 _assetId, uint256 amount) external payable {\r\n        Asset storage asset = assets[_assetId];\r\n        require(asset.seller != address(0), \"Asset does not exist\");\r\n        require(asset.isActive, \"Asset not active\");\r\n        require(amount > 0 && amount <= asset.tokensAvailable, \"Invalid amount\");\r\n        require(asset.tokenSupply > 0, \"Invalid token supply\");\r\n\r\n        uint256 pricePerToken = asset.price / asset.tokenSupply;\r\n        uint256 totalCost = pricePerToken * amount;\r\n\r\n        require(msg.value == totalCost, \"Incorrect ETH amount sent\");\r\n\r\n        (bool sent, ) = asset.seller.call{ value: msg.value }(\"\");\r\n        require(sent, \"ETH transfer failed\");\r\n\r\n        asset.tokensAvailable -= amount;\r\n\r\n        if (asset.tokensAvailable == 0) {\r\n            asset.isActive = false;\r\n            emit AssetDeactivated(_assetId);\r\n        }\r\n\r\n        emit AssetsPurchasedEvent(_assetId, msg.sender, amount);\r\n\r\n        tokensOwnedByUser[msg.sender][_assetId] += amount;\r\n        purchasesByBuyer[msg.sender].push(\r\n            AssetPurchased(\r\n                purchaseID,\r\n                _assetId,\r\n                msg.sender,\r\n                asset.title,\r\n                asset.description,\r\n                asset.category,\r\n                asset.imageURIs,\r\n                amount\r\n            )\r\n        );\r\n        purchaseID++;\r\n    }\r\n\r\n    // === Getters ===\r\n    function getAsset(uint256 _assetId) external view returns (Asset memory) {\r\n        require(assets[_assetId].seller != address(0), \"Asset does not exist\");\r\n        return assets[_assetId];\r\n    }\r\n\r\n    function getPricePerToken(uint256 _assetId) external view returns (uint256) {\r\n        Asset memory asset = assets[_assetId];\r\n        require(asset.tokenSupply > 0, \"Invalid token supply\");\r\n        return asset.price / asset.tokenSupply;\r\n    }\r\n\r\n    function deactivateAsset(uint256 _assetId) external {\r\n        Asset storage asset = assets[_assetId];\r\n        require(asset.seller != address(0), \"Asset does not exist\");\r\n        require(msg.sender == asset.seller || msg.sender == owner(), \"Not authorized\");\r\n        require(asset.isActive, \"Asset already inactive\");\r\n\r\n        asset.isActive = false;\r\n        emit AssetDeactivated(_assetId);\r\n    }\r\n\r\n    function getAllAssets() external view returns (Asset[] memory) {\r\n        Asset[] memory allAssets = new Asset[](nextAssetId);\r\n        for (uint256 i = 0; i < nextAssetId; i++) {\r\n            allAssets[i] = assets[i];\r\n        }\r\n        return allAssets;\r\n    }\r\n\r\n    function getAllPublishedAssets(address _publisher) external view returns (Asset[] memory) {\r\n        Asset[] memory allAssets = new Asset[](nextAssetId);\r\n        for (uint256 i = 0; i < nextAssetId; i++) {\r\n            if (assets[i].seller == _publisher) {\r\n                allAssets[i] = assets[i];\r\n            }\r\n        }\r\n        return allAssets;\r\n    }\r\n\r\n    function getAllAssetsPurchased(address _buyer) external view returns (AssetPurchased[] memory) {\r\n        return purchasesByBuyer[_buyer];\r\n    }\r\n\r\n    function getTokensOwnedByUser(address user, uint256 _assetId) external view returns (uint256) {\r\n        return tokensOwnedByUser[user][_assetId];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}